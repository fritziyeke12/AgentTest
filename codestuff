using Microsoft.Graph;
using Microsoft.Identity.Client;
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

public class AADGraphClient
{
    private readonly string _clientId = "YOUR_CLIENT_ID";
    private readonly string _tenantId = "YOUR_TENANT_ID";
    private readonly string _clientSecret = "YOUR_CLIENT_SECRET";
    private GraphServiceClient _graphClient;

    public AADGraphClient()
    {
        InitializeGraphClient().Wait();
    }

    private async Task InitializeGraphClient()
    {
        // Build Confidential Client Application for acquiring tokens
        var confidentialClient = ConfidentialClientApplicationBuilder.Create(_clientId)
            .WithClientSecret(_clientSecret)
            .WithTenantId(_tenantId)
            .Build();

        // Get a token for Microsoft Graph
        var authResult = await confidentialClient.AcquireTokenForClient(new[] { "https://graph.microsoft.com/.default" })
            .ExecuteAsync();

        // Set up HttpClient for Graph API requests
        var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", authResult.AccessToken);

        // Initialize Graph client with the authenticated HttpClient
        _graphClient = new GraphServiceClient(httpClient);
    }

    public async Task<string> GetUserPresenceAsync(string userId)
    {
        try
        {
            // Fetch Teams presence using Microsoft Graph API
            var presence = await _graphClient.Users[userId].Presence.Request().GetAsync();
            return presence.Availability; // Returns "Available", "Busy", "DoNotDisturb", etc.
        }
        catch (ServiceException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return null;
        }
    }
}
