using Microsoft.Identity.Client;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

public class AADGraphClient
{
    private readonly string _clientId = "YOUR_CLIENT_ID"; // Replace with your client ID
    private readonly string _tenantId = "YOUR_TENANT_ID"; // Replace with your tenant ID
    private readonly string _clientSecret = "YOUR_CLIENT_SECRET"; // Replace with your client secret
    private readonly string _graphApiUrl = "https://graph.microsoft.com/v1.0/users/{userId}/presence";

    public async Task<string> GetUserPresenceAsync(string userId)
    {
        var accessToken = await GetAccessTokenAsync();

        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await httpClient.GetAsync(_graphApiUrl.Replace("{userId}", userId));

            if (response.IsSuccessStatusCode)
            {
                var presence = await response.Content.ReadAsStringAsync();
                // You can parse the presence JSON response here
                return presence; // Return the raw JSON response or parse it to get the availability
            }
            else
            {
                // Handle error response
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error fetching presence: {errorMessage}");
                return null;
            }
        }
    }

    private async Task<string> GetAccessTokenAsync()
    {
        IConfidentialClientApplication confidentialClient = ConfidentialClientApplicationBuilder.Create(_clientId)
            .WithClientSecret(_clientSecret)
            .WithTenantId(_tenantId)
            .Build();

        var authResult = await confidentialClient.AcquireTokenForClient(new[] { "https://graph.microsoft.com/.default" })
            .ExecuteAsync();

        return authResult.AccessToken;
    }
}
